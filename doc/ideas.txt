

// Single line comment

/* Multi-line
   comment
 */

## Formal Documentation
#  note:  intermediate # not required
#  similar to javadoc
## ...


/* Modules can span multiple files, as long as the name matches.
 * However, one (and only one) file must provide the interface 
 * (i.e. which names the module exports).
 */
module Math exports {
    '+', 
    '-', 
    '*',
    '/',
    fibonacci
}

import { 
    IO (a,b,c,ez)
    Math (as,1,2,3)
}


/* Classes are collections of types that satisfy the conditions specified
 * This allows for the reference to a 'type class' that is gauranteed by
 * the compiler for certain objects to exist
 */
class Num a {
    // Objects that must be implemented to be a member of the class
    '0' : a

    // Functions that must be implemented to be a member of the class
    fun '+' : a -> a -> a
    fun '-' : a -> a -> a

    /* Possible language feature 'require', which would be implemented 
     * with some kind of checking algorithm that determines the validity
     * of the requirements
     */
    require n : a that zero + n = n
    require n : a that n + zero = n

    require n : a that n - zero = n
    require n : a that n - n    = zero
}


class Collection a {
    empty : a

    fun sizeof : Num b, Collection a -> b

    fun map : (a -> b) -> Collection a -> Collection b

    // In this example, we can use 0 because it is defined in the Num class
    require sizeof empty = 0
}



/* Type definition 
 */
type List a = Nil | Cons a (List a)


/* Declares that a list is a collection and provides definitions to satisfy
 * the class's conditions
 */
instance List a of Collection a {
    empty = Nil

    fun sizeof : List a -> Integer 
        = \l -> case l of
            Nil -> 0,
            Cons a l' -> 1 + sizeof l'

    fun map : (a -> b) -> List a -> List b
        = \f la -> case la of
            Nil -> Nil,
            Cons a la' -> Cons (f a) (map f la')

    // Requirement is checked by the compiler, not provided for by the user
}



proc main : Proc (List String -> ()) {
    IO.println ("wassup")
}